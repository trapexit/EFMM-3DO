	This file contains brief descriptions of all the relevant source
modules in this directory.  For descriptions of files within subdirectories,
see the description present in the relevant directory.


Header Files
------------

anim.h
	Definitions for handling animated art.

app_proto.h
	Comprehensive list of prototypes of all externally available
	functions in the program.  This file is automatically generated
	using UNIX tools.

castle.h
	Major structure and symbol definitions of general interest.  Nearly
	every source module includes this.

flow.h
	Symbol definitions for flow control.

font.h
	Structure and symbol definitions for Greg Omi's font code.

imgfile.h
	Structure definitions for utilizing images loaded with imgfile.c.

loaf.h
	Public definitions for utilizing images loaded with loadloaf.c.

objects.h
	Structure and symbol definitions for creating and utilizing EFMM
	objects.

ob_powerup.h
	Structure and symbol definitions for powerup objects.

option.h
	Structure and symbol definitions for high score/saved game manager.

sound.h
	Symbol definitions for one-shot sound effects.

soundinterface.h
	Structure and symbol definitions needed to utilize soundinterface.c.

textstuff.h
	Structure definition for utilizing Greg Omi's font system.


Source Files
------------

availmem.c
	A diagnostic tool that reports memory use and approximate
	fragmentation.  It is used for debugging, and not part of the final
	executable.

cinepak.c
	Routines to handle CinePak DataStreams.

clip.c
	Routines to clip cels against a near Z-clipping plane.

ctst.c
	The main source module.  main() is located in here, in addition to
	the core visibility extractor.

elkabong.c
	Routines to defend against a lockup bug in the filesystem.

file.c
	Convenience routines to allocate memory for and load files.

genmessage.c
	Routines to display an informative message on top of the game.
	(This module is used to display "Exit!" and "You need the
	Talisman.")

imgfile.c
	Routines to load and parse 3DO-format cel files.

leveldef.c
	Static table defining the meaning of the characters in the map
	files.

levelfile.c
	Routines to load and dispose of map files.

loadloaf.c
	Routines to load and dispose of LOAF (Leo's Opera Art Format) files.

map.c
	Routines to draw the overhead map.

misc.asm
	Miscellaneous assembly routines.

objects.c
	General routines for handling EFMM objects (monsters, decorations,
	doors, etc.).  Also contains the code to handle the doors.

ob_exit.c
	Routines to handle the level exit object.

ob_george.c
	Routines to handle the ghost monster object.

ob_head.c
	Routines to handle the floating head monster object.

ob_powerup.c
	Routines to handle the powerup objects (keys, ammo, etc.).

ob_spider.c
	Routines to handle the spider monster object.

ob_trigger.c
	Routines to handle the door trigger object.

ob_zombie.c
	Routines to handle the zombie/death monster object.

option.c
	Routines to display and manage the high score screen, and the game
	load/save screens.  Also contains the code that reads/writes /NVRAM.
	(This file is mis-named.)

project.asm
	3D point projector, in ARM assembly.

rend.c
	Main rendering routines.  Performs refined visibility extraction,
	build sorted cel list, and renders the screen.

shoot.c
	Routines to handle shooting and/or probing objects.

sound.c
	Front-end routines for handling one-shot and spooled sound effects.

soundinterface.c
	Main sound handling code.  Supports one-shot and spooled sound
	effects.  Written by Peter Commons.

statscreen.c
	Routines to display and manage the "end-of-level" screen (the one
	that tells you how many points you have, how much health you have
	left over, etc.).  Also contains the routines to display and manage
	the options screen.  Also contains the routines to display and
	manage the credits screen.  (It probably should have been broken
	up.)

textstuff.c
	Routines to manage and utilize Greg Omi's font system.

thread.c
	Sub-program and support routines for interrogating the joypad and
	generally keeping track of time.

timing.c
	Diagnostic routines to time how long it takes to render a frame.
	Used for diagnostic purposes.  Not used in the game, but it never
	got excised.

titleseq.c
	Routines to display and manage the opening title sequence.

zombietitle.c
	Ancient code to display and manage the original Summer-93 CES
	version of Monster Manor.  All the support and art files are gone,
	but I thought I'd leave this hanging around for your amusement.


Other Files
-----------

.exrc
	Preferred edit settings for the 'vi' editor.  (Remember, this
	directory is a copy of a UNIX directory.)

ctst
	The completed EFMM program.  (It started life as 'ctst' and never
	got renamed.  Oh well...)

ctst.catsym
	ASCII list of all symbols in the program and their offset within
	the binary.  Useful for debugging.

DEPENDS
	List of make dependencies.  The first pass of this file is generated
	using Amiga tools.  It then gets edited and incorporated into the
	Makefile.

font.co
font.so
	Object modules containing Greg Omi's font system.  Built in the
	directory 'FontStuff'.

Makefile
	The Mac-format Makefile.

Makefile.UNIX
	The original UNIX-format Makefile.  Refer to this if ever you need
	to know the original build build sequence.

music.lib
	Version of music.lib NEWER than that shipped with OS release 1.1.
	This version fixes some lockup bugs in the music spooler, obtained
	directly from Phil Burk.

	THIS VERSION OF music.lib IS **NOT** OFFICIALLY SUPPORTED BY 3DO.
	VERSION 1.2 WILL HAVE THE BUG FIXED.  WHEN IT COMES OUT, THROW THIS
	AWAY.

NormalBuildOutput
	The output generated by MPW/armcc by a normal successful build,
	present here for reference.  Yes, it has tons of warnings in it.
